<templateSet group="Ross">
  <template name="rnt" value="import React, {Component} from 'react'&#10;import { connect } from 'react-redux'&#10;&#10;class $Name$ extends Component {&#10;  render(){&#10;    return (&#10;      &lt;div&gt;$Name$&lt;/div&gt;&#10;      )&#10;    }&#10;}&#10;&#10;const connectStateToProps = (state)=&gt;{&#10;    return {} // something off state object&#10;}&#10;&#10;export default connect(&#10;    connectStateToProps,&#10;    {} // actions to be used&#10;    )($Name$)&#10;" description="Create a React-Redux Container Component" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="fileNameWithoutExtension()" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="log" value="console.log($value$,$value2$)" description="console.log" toReformat="false" toShortenFQNames="true">
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="test" value="test('$TITLE$', t =&gt; {&#10;    $TEST$&#10;})" description="Ava test" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TEST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="atest" value="test('$TITLE$', async (t) =&gt; {&#10;    $TEST$&#10;})" description="Ava Async Test" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TEST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>